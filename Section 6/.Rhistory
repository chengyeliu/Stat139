group3 = c(1,0,1,2,1)
means = c(mean(group1), mean(group2), mean(group3))
sds = c(sd(group1),sd(group2),sd(group3))
n=c(5,5,5)
vals = c(group1,group2,group3)
groups = c(rep(1,5), rep(2,5), rep(3,5))
# Run the ANOVA
data = data.frame(vals,groups)
model = aov(data$vals~factor(data$groups))
summary(model)
# Pairwise t-tests
t.test(group1,group2, pooled.var=T)$p.value*3
t.test(group1,group3, pooled.var=T)$p.value*3
t.test(group2,group3, pooled.var=T)$p.value*3
# Contrast tests
Sp2 = sum((n-1)*sds^2)/ (sum(n)-length(n))
df = sum(n)-length(n)
#Testing group 1 versus group 2
a = c(1,-1,0)
T_num = sum(a*means)
T_denom = sqrt(Sp2) * sqrt(sum(a^2/n))
T = T_num / T_denom
p.val = 2*(1-pt(T,df))
p.val*3
#Testing group 1 versus group 3
a = c(1,0,-1)
T_num = sum(a*means)
T_denom = sqrt(Sp2) * sqrt(sum(a^2/n))
T = T_num / T_denom
p.val = 2*(1-pt(T,df))
p.val*3
#Testing group 2 versus group 3
a = c(0,1,-1)
T_num = sum(a*means)
T_denom = sqrt(Sp2) * sqrt(sum(a^2/n))
T = T_num / T_denom
p.val = 2*(1-pt(T,df))
p.val*3
TukeyHSD(model) # the easiest way
numgroups = 3
nobs = 15
nbar = mean(n)
alpha = 0.05
q = qtukey(1-alpha,numgroups,nobs - numgroups)/sqrt(2)
alpha_tukey=2*(1-pt(q,df=nobs-numgroups))
t.test(group1,group2,pooled.var=T)$p.value
t.test(group1,group3,pooled.var=T)$p.value
t.test(group2,group3,pooled.var=T)$p.value
alpha_tukey
TukeyHSD(model) # the easiest way
nbar = mean(n)
nobs = 15
I = 3
t_obs1 = (means[1]-means[2])/sqrt(Sp2/nbar)
t_obs2 = (means[1]-means[3])/sqrt(Sp2/nbar)
t_obs3 = (means[2]-means[3])/sqrt(Sp2/nbar)
1-ptukey(t_obs1, I, nobs-I)
1-ptukey(t_obs2, I, nobs-I)
1-ptukey(t_obs3, I, nobs-I)
TukeyHSD(model)
alpha_tukey
n.sim = 100
# Initalize some vectors where we'll put our simulation values
pval_12.t = pval_13.t = pval_23.t = c() #t-tests
pval_12.c = pval_13.c = pval_23.c = c() #contrast tests
pval_12.HSD = pval_13.HSD = pval_23.HSD = c() #Tukey's HSD
# Initialize all of our given numbers
alpha = 0.05
n = 15
numgroups = 3
numtests = choose(numgroups,2)
alpha_bonferroni = alpha / numtests
q = qtukey(1-alpha,numgroups,n - numgroups)/sqrt(2)
alpha_tukey=2*(1-pt(q,df=n-numgroups))
for (i in 1:n.sim){
# First we generate data from 3 groups
x1 = rnorm(5, mean=1, sd=1)
x2 = rnorm(5, mean=1, sd=1)
x3 = rnorm(5, mean=1, sd=1)
x = c(x1,x2,x3)
groups = rep(1:3, each=5)
k = 3
# Pairwise t-tests
alpha = 0.05
pval_12.t[i]=t.test(x1,x2,var.equal=T)$p.value #multiply by k to correct for multiple comparisons
pval_13.t[i]=t.test(x1,x3,var.equal=T)$p.value
pval_23.t[i]=t.test(x2,x3, var.equal=T)$p.value
# Contrast tests
means = c(mean(x1), mean(x2), mean(x3))
sds = c(sd(x1), sd(x2), sd(x3))
n = c(5,5,5)
Sp2 = sum((n-1)*sds^2)/ (sum(n)-length(n))
df = sum(n)-length(n)
a = c(1,-1,0)
T_num = sum(a*means)
T_denom = sqrt(Sp2) * sqrt(sum(a^2/n))
T = abs(T_num / T_denom)
pval_12.c[i] = 2*(1-pt(T,df))
a = c(1,0,-1)
T_num = sum(a*means)
T_denom = sqrt(Sp2) * sqrt(sum(a^2/n))
T = abs(T_num / T_denom)
pval_13.c[i] = 2*(1-pt(T,df))
a = c(0,1,-1)
T_num = sum(a*means)
T_denom = sqrt(Sp2) * sqrt(sum(a^2/n))
T = abs(T_num / T_denom)
pval_23.c[i] = 2*(1-pt(T,df))
# Tukey's HSD
model = aov(x~factor(groups))
tukeytest = TukeyHSD(model)
tukeytest_pvals = as.vector(tukeytest[[1]][,4])
pval_12.HSD[i]=tukeytest_pvals[1]
pval_13.HSD[i]=tukeytest_pvals[2]
pval_23.HSD[i]=tukeytest_pvals[3]
}
par(mfrow=c(1,3))
hist(pval_12.t)
abline(v=0.05, col="red")
hist(pval_12.c)
abline(v=0.05, col="red")
hist(pval_12.HSD)
abline(v=0.05, col="red")
mean(pval_12.t <= alpha_bonferroni)
mean(pval_12.c <= alpha_bonferroni)
mean(pval_12.HSD <= alpha)
par(mfrow=c(1,3))
hist(pval_13.t)
abline(v=0.05, col="red")
hist(pval_13.c)
abline(v=0.05, col="red")
hist(pval_13.HSD)
abline(v=0.05, col="red")
# Compares Type I Error rate for mean difference between groups 1 and 3
mean(pval_13.t <= alpha_bonferroni)
mean(pval_13.c <= alpha_bonferroni)
mean(pval_13.HSD <= alpha)
par(mfrow=c(1,3))
hist(pval_23.t)
abline(v=0.05, col="red")
hist(pval_23.c)
abline(v=0.05, col="red")
hist(pval_23.HSD)
abline(v=0.05, col="red")
# Compares Type I Error rate for mean difference between groups 2 and 3
mean(pval_23.t <= alpha_bonferroni)
mean(pval_23.c <= alpha_bonferroni)
mean(pval_23.HSD <= alpha)
par(mfrow=c(1,1))
for (i in 1:n.sim){
# First we generate data from 3 groups
x1 = rnorm(5, mean=1, sd=1)
x2 = rnorm(5, mean=5, sd=1)
x3 = rnorm(5, mean=1, sd=1)
x = c(x1,x2,x3)
groups = rep(1:3, each=5)
k = 3
# Pairwise t-tests
alpha = 0.05
pval_12.t[i]=t.test(x1,x2,var.equal=T)$p.value #multiply by k to correct for multiple comparisons
pval_13.t[i]=t.test(x1,x3,var.equal=T)$p.value
pval_23.t[i]=t.test(x2,x3, var.equal=T)$p.value
# Contrast tests
means = c(mean(x1), mean(x2), mean(x3))
sds = c(sd(x1), sd(x2), sd(x3))
n = c(5,5,5)
Sp2 = sum((n-1)*sds^2)/ (sum(n)-length(n))
df = sum(n)-length(n)
a = c(1,-1,0)
T_num = sum(a*means)
T_denom = sqrt(Sp2) * sqrt(sum(a^2/n))
T = abs(T_num / T_denom)
pval_12.c[i] = 2*(1-pt(T,df))
a = c(1,0,-1)
T_num = sum(a*means)
T_denom = sqrt(Sp2) * sqrt(sum(a^2/n))
T = abs(T_num / T_denom)
pval_13.c[i] = 2*(1-pt(T,df))
a = c(0,1,-1)
T_num = sum(a*means)
T_denom = sqrt(Sp2) * sqrt(sum(a^2/n))
T = abs(T_num / T_denom)
pval_23.c[i] = 2*(1-pt(T,df))
# Tukey's HSD
model = aov(x~factor(groups))
tukeytest = TukeyHSD(model)
tukeytest_pvals = as.vector(tukeytest[[1]][,4])
pval_12.HSD[i]=tukeytest_pvals[1]
pval_13.HSD[i]=tukeytest_pvals[2]
pval_23.HSD[i]=tukeytest_pvals[3]
}
par(mfrow=c(1,3))
hist(pval_12.t)
abline(v=0.05, col="red")
hist(pval_12.c)
abline(v=0.05, col="red")
hist(pval_12.HSD)
abline(v=0.05, col="red")
mean(pval_12.t <= alpha_bonferroni)
mean(pval_12.c <= alpha_bonferroni)
mean(pval_12.HSD <= alpha)
par(mfrow=c(1,3))
hist(pval_13.t)
abline(v=0.05, col="red")
hist(pval_13.c)
abline(v=0.05, col="red")
hist(pval_13.HSD)
abline(v=0.05, col="red")
# Compares Type I Error rate for mean difference between groups 1 and 3
mean(pval_13.t <= alpha_bonferroni)
mean(pval_13.c <= alpha_bonferroni)
mean(pval_13.HSD <= alpha)
par(mfrow=c(1,3))
hist(pval_23.t)
abline(v=0.05, col="red")
hist(pval_23.c)
abline(v=0.05, col="red")
hist(pval_23.HSD)
abline(v=0.05, col="red")
# Compares Type I Error rate for mean difference between groups 2 and 3
mean(pval_23.t <= alpha_bonferroni)
mean(pval_23.c <= alpha_bonferroni)
mean(pval_23.HSD <= alpha)
par(mfrow=c(1,1))
for (i in 1:n.sim){
# First we generate data from 3 groups
x1 = rnorm(5, mean=1, sd=1)
x2 = rnorm(5, mean=2, sd=1)
x3 = rnorm(5, mean=1, sd=1)
x = c(x1,x2,x3)
groups = rep(1:3, each=5)
k = 3
# Pairwise t-tests
alpha = 0.05
pval_12.t[i]=t.test(x1,x2,var.equal=T)$p.value #multiply by k to correct for multiple comparisons
pval_13.t[i]=t.test(x1,x3,var.equal=T)$p.value
pval_23.t[i]=t.test(x2,x3, var.equal=T)$p.value
# Contrast tests
means = c(mean(x1), mean(x2), mean(x3))
sds = c(sd(x1), sd(x2), sd(x3))
n = c(5,5,5)
Sp2 = sum((n-1)*sds^2)/ (sum(n)-length(n))
df = sum(n)-length(n)
a = c(1,-1,0)
T_num = sum(a*means)
T_denom = sqrt(Sp2) * sqrt(sum(a^2/n))
T = abs(T_num / T_denom)
pval_12.c[i] = 2*(1-pt(T,df))
a = c(1,0,-1)
T_num = sum(a*means)
T_denom = sqrt(Sp2) * sqrt(sum(a^2/n))
T = abs(T_num / T_denom)
pval_13.c[i] = 2*(1-pt(T,df))
a = c(0,1,-1)
T_num = sum(a*means)
T_denom = sqrt(Sp2) * sqrt(sum(a^2/n))
T = abs(T_num / T_denom)
pval_23.c[i] = 2*(1-pt(T,df))
# Tukey's HSD
model = aov(x~factor(groups))
tukeytest = TukeyHSD(model)
tukeytest_pvals = as.vector(tukeytest[[1]][,4])
pval_12.HSD[i]=tukeytest_pvals[1]
pval_13.HSD[i]=tukeytest_pvals[2]
pval_23.HSD[i]=tukeytest_pvals[3]
}
n.sim = 100
# Initalize some vectors where we'll put our simulation values
pval_12.t = pval_13.t = pval_23.t = c() #t-tests
pval_12.c = pval_13.c = pval_23.c = c() #contrast tests
pval_12.HSD = pval_13.HSD = pval_23.HSD = c() #Tukey's HSD
# Initialize all of our given numbers
alpha = 0.05
n = 15
numgroups = 3
numtests = choose(numgroups,2)
alpha_bonferroni = alpha / numtests
q = qtukey(1-alpha,numgroups,n - numgroups)/sqrt(2)
alpha_tukey=2*(1-pt(q,df=n-numgroups))
for (i in 1:n.sim){
# First we generate data from 3 groups
x1 = rnorm(5, mean=1, sd=1)
x2 = rnorm(5, mean=2, sd=1)
x3 = rnorm(5, mean=1, sd=1)
x = c(x1,x2,x3)
groups = rep(1:3, each=5)
k = 3
# Pairwise t-tests
alpha = 0.05
pval_12.t[i]=t.test(x1,x2,var.equal=T)$p.value #multiply by k to correct for multiple comparisons
pval_13.t[i]=t.test(x1,x3,var.equal=T)$p.value
pval_23.t[i]=t.test(x2,x3, var.equal=T)$p.value
# Contrast tests
means = c(mean(x1), mean(x2), mean(x3))
sds = c(sd(x1), sd(x2), sd(x3))
n = c(5,5,5)
Sp2 = sum((n-1)*sds^2)/ (sum(n)-length(n))
df = sum(n)-length(n)
a = c(1,-1,0)
T_num = sum(a*means)
T_denom = sqrt(Sp2) * sqrt(sum(a^2/n))
T = abs(T_num / T_denom)
pval_12.c[i] = 2*(1-pt(T,df))
a = c(1,0,-1)
T_num = sum(a*means)
T_denom = sqrt(Sp2) * sqrt(sum(a^2/n))
T = abs(T_num / T_denom)
pval_13.c[i] = 2*(1-pt(T,df))
a = c(0,1,-1)
T_num = sum(a*means)
T_denom = sqrt(Sp2) * sqrt(sum(a^2/n))
T = abs(T_num / T_denom)
pval_23.c[i] = 2*(1-pt(T,df))
# Tukey's HSD
model = aov(x~factor(groups))
tukeytest = TukeyHSD(model)
tukeytest_pvals = as.vector(tukeytest[[1]][,4])
pval_12.HSD[i]=tukeytest_pvals[1]
pval_13.HSD[i]=tukeytest_pvals[2]
pval_23.HSD[i]=tukeytest_pvals[3]
}
par(mfrow=c(1,3))
hist(pval_12.t)
abline(v=0.05, col="red")
hist(pval_12.c)
abline(v=0.05, col="red")
hist(pval_12.HSD)
abline(v=0.05, col="red")
# Compares Type I Error rate for mean difference between groups 1 and 2
mean(pval_12.t <= alpha_bonferroni)
mean(pval_12.c <= alpha_bonferroni)
mean(pval_12.HSD <= alpha)
par(mfrow=c(1,3))
hist(pval_13.t)
abline(v=0.05, col="red")
hist(pval_13.c)
abline(v=0.05, col="red")
hist(pval_13.HSD)
abline(v=0.05, col="red")
# Compares Type I Error rate for mean difference between groups 1 and 3
mean(pval_13.t <= alpha_bonferroni)
mean(pval_13.c <= alpha_bonferroni)
mean(pval_13.HSD <= alpha)
par(mfrow=c(1,3))
hist(pval_23.t)
abline(v=0.05, col="red")
hist(pval_23.c)
abline(v=0.05, col="red")
hist(pval_23.HSD)
abline(v=0.05, col="red")
# Compares Type I Error rate for mean difference between groups 2 and 3
mean(pval_23.t <= alpha_bonferroni)
mean(pval_23.c <= alpha_bonferroni)
mean(pval_23.HSD <= alpha)
par(mfrow=c(1,1))
set.seed(12)
nsims=10000
alpha=0.05
numgroups=5
I=10
alpha.bonf=alpha/I
alpha.ind=1 - (1-alpha)^(1/I)
q=qtukey(0.95,numgroups,20)/sqrt(2)
alpha.tukey=2*(1-pt(q,df=20))
alpha.bonf
alpha.ind
q=qtukey(0.95,numgroups,50)/sqrt(2)
alpha.tukey=2*(1-pt(q,df=20))
alpha.tukey
q=qtukey(0.95,numgroups,20)/sqrt(2)
alpha.tukey=2*(1-pt(q,df=20))
alpha.tukey
q=qtukey(0.95,numgroups,50)/sqrt(2)
alpha.tukey=2*(1-pt(q,df=20))
alpha.tukey
minpvalues=c()
minpvalues.tukey = c()
for(i in 1:nsims){
tstats=rt(I,df=20)
minpvalues[i]=2*(1-pt(max(abs(tstats)),df=20))
minpvalues.tukey[i]=2*(1-ptukey(max(abs(tstats))*sqrt(2),numgroups,20))
}
mean(minpvalues<alpha)
mean(minpvalues<alpha.bonf)
mean(minpvalues<alpha.ind)
mean(minpvalues<alpha.tukey)
mean(minpvalues.tukey < 2*alpha)
#d
minpvalues=rep(NA,nsims)
for(i in 1:nsims){
x=matrix(rnorm(55),ncol=5)
xbars=apply(x,2,mean)
minpvalues[i]= t.test(x[,which(xbars==max(xbars))], x[,which(xbars==min(xbars))],var.equal=T)$p.value
}
mean(minpvalues<alpha)
mean(minpvalues<alpha.bonf)
mean(minpvalues<alpha.ind)
mean(minpvalues<alpha.tukey)
n.sim = 10000
n.tests = 10
n.groups = 5
min.pvals = c()
p.vals = c()
p.val_1=c()
p.val_2=c()
p.val_3=c()
p.val_4=c()
p.val_5=c()
p.val_6=c()
p.val_7=c()
p.val_8=c()
p.val_9=c()
p.val_10=c()
#Simulate: PART D
for (i in 1:n.sim){
x1 = rnorm(11, 0, 1)
x2 = rnorm(11, 0, 1)
x3 = rnorm(11, 0, 1)
x4 = rnorm(11, 0, 1)
x5 = rnorm(11, 0, 1)
p.val_1[i]=t.test(x1,x2)$p.value
p.val_2[i]=t.test(x1,x3)$p.value
p.val_3[i]=t.test(x1,x4)$p.value
p.val_4[i]=t.test(x1,x5)$p.value
p.val_5[i]=t.test(x2,x3)$p.value
p.val_6[i]=t.test(x2,x4)$p.value
p.val_7[i]=t.test(x2,x5)$p.value
p.val_8[i]=t.test(x3,x4)$p.value
p.val_9[i]=t.test(x3,x5)$p.value
p.val_10[i]=t.test(x4,x5)$p.value
min.pvals[i]=min(p.val_1, p.val_2, p.val_3, p.val_4, p.val_5, p.val_6, p.val_7, p.val_8, p.val_9, p.val_10)
}
unadjusted_error = mean(min.pvals <= 0.05)
# ii) Bonferroni corrected alpha=0.05/I where I=10. alpha*=0.005
bonferroni_error = mean(min.pvals <= 0.005)
# iii) Part B-ajusted alpha*=0.0051
partB_error = mean(min.pvals <= 0.0051)
# iv) Tukey-adjusted alpha*=0.007
Tukey_error = mean(min.pvals <= 0.007)
list(unadjusted_error, bonferroni_error, partB_error, Tukey_error)
#Simulate: PART D
for (i in 1:n.sim){
x1 = rnorm(11, 0, 1)
x2 = rnorm(11, 0, 1)
x3 = rnorm(11, 0, 1)
x4 = rnorm(11, 0, 1)
x5 = rnorm(11, 0, 1)
p.val_1=t.test(x1,x2)$p.value
p.val_2=t.test(x1,x3)$p.value
p.val_3=t.test(x1,x4)$p.value
p.val_4=t.test(x1,x5)$p.value
p.val_5=t.test(x2,x3)$p.value
p.val_6=t.test(x2,x4)$p.value
p.val_7=t.test(x2,x5)$p.value
p.val_8=t.test(x3,x4)$p.value
p.val_9=t.test(x3,x5)$p.value
p.val_10=t.test(x4,x5)$p.value
min.pvals[i]=min(p.val_1, p.val_2, p.val_3, p.val_4, p.val_5, p.val_6, p.val_7, p.val_8, p.val_9, p.val_10)
}
#Compare type 1 error rate at each (adjusted) alpha level
# i)  Unadjusted alpha=0.05
unadjusted_error = mean(min.pvals <= 0.05)
# ii) Bonferroni corrected alpha=0.05/I where I=10. alpha*=0.005
bonferroni_error = mean(min.pvals <= 0.005)
# iii) Part B-ajusted alpha*=0.0051
partB_error = mean(min.pvals <= 0.0051)
# iv) Tukey-adjusted alpha*=0.007
Tukey_error = mean(min.pvals <= 0.007)
list(unadjusted_error, bonferroni_error, partB_error, Tukey_error)
n = c(24,67,32)
N = sum(n)
mean = c(76.88,71.45,63.19)
sd = c(14.10, 13.05, 17.3)
allmean = sum(mean*(n/N))
SSB = sum(n*(mean-allmean)^2)
SSW = sum((n-1)*sd^2)
dfB = length(n)-1
dfW = N - length(n)
F_obs = (SSB/dfB)/(SSW/dfW)
1 - pf(F_obs, dfB, dfW) #p-value
setwd("~/Desktop/Stat139/Section 6")
data = read.csv("insurance_claims.csv")
head(data)
attach(data)
summary(claim_type)
summary(claim_amount)
hist(claim_amount)
boxplot(log(claim_amount)~fraudulent)
qqplot(claim_amount)
qqplot
?qqplot
qqplot(claim_amount~fraudulent)
qqnorm(claim_amount~fraudulent)
qqnorm(claim_amount)
qqline(claim_amount)
boxplot(log(claim_amount)~claim_type)
hist(claim_amount)
qqnorm(claim_amount)
qqline(claim_amount)
x
x = c(1,2,3,4,5)
sd(x)
mean(x)
median(x)
x = c(1,2,3,4,5,6)
mean(x)
median(x)
sd(x)
x = c(1,2,3,4,5,6000)
median(x)
mean(x)
sd(x)
