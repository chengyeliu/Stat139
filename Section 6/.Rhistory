c(mu_hatASY, ESS_ASY)
normalized_weights=normalized_weightsASY
thetas_samp=thetas_samp2
Ai = rmultinom(1,size=N,prob=normalized_weights)
resamp = as.data.frame(cbind(thetas_samp, Ai))
thetas_resamp = c()
for (i in 1:n){
thetas_resamp = c(thetas_resamp, rep(resamp$thetas_samp[i], resamp$V2[i]))
}
hist(thetas_resamp, main="Resampled Samples from IS", xlab="Theta", xlim=c(0,1))
thetas_samp2 = rnorm(N, mean=MLE$maximum, sd=sqrt(V_star/n))
imp_weights2 = pi_u(thetas_samp2)/BMLE_u(thetas_samp2)
# Using asymptotic distribution as proposal
mu_hatASY = sum(imp_weights2*thetas_samp2)/sum(imp_weights2)
normalized_weightsASY = imp_weights2 / sum(imp_weights2)
ESS_ASY = 1/sum(normalized_weightsASY^2)
c(mu_hatASY, ESS_ASY)
# Resampling
Ai = rmultinom(1,size=N,prob=normalized_weights)
resamp = as.data.frame(cbind(thetas_samp, Ai))
thetas_resamp = c()
for (i in 1:n){
thetas_resamp = c(thetas_resamp, rep(resamp$thetas_samp[i], resamp$V2[i]))
}
hist(thetas_resamp, main="Resampled Samples from IS", xlab="Theta", xlim=c(0,1))
plot(seq(0,1,.01), BMLE_u(seq(0,1,.01)), type='l', main="Proposal using Asymptotics", ylab="", xlab="Theta")
N = 10000
thetas_samp2 = rnorm(N, mean=MLE$maximum, sd=sqrt(V_star/N))
imp_weights2 = log_P_theta_Y(thetas_samp2)/BMLE_u(thetas_samp2)
mu_hatASY = sum(imp_weights2*thetas_samp2)/sum(imp_weights2)
normalized_weightsASY = imp_weights2 / sum(imp_weights2)
ESS_ASY = 1/sum(normalized_weightsASY^2)
c(mu_hatASY, ESS_ASY)
hist(thetas_resamp, main="Resampled Samples from IS", xlab="Theta", xlim=c(0,1))
rho_star = 0.95
n = 10
x = c()
x[1] = rnorm(1)
for (i in 2:n){
mu = rho_star * x[i-1]
x[i] = mu + rnorm(1)
}
# Posterior by MH
post_vals = function(rho){
const = (1/sqrt(2*pi))^n * (1/2)
sum = 0
sum = x[1]^2
for (i in 2:n){
next_comp = (x[i]-rho*x[i-1])^2
sum = sum + next_comp
}
val = const * exp(-(1/2)*sum) * (rho >= -1 & rho <= 1)
return (val)
}
post_vals_unnorm = function(rho){
sum = 0
sum = x[1]^2
for (i in 2:n){
next_comp = (x[i]-rho*x[i-1])^2
sum = sum + next_comp
}
val = exp(-(1/2)*sum) * (rho >= -1 & rho <= 1)
return (log(val))
}
rho_samp = c()
rho_samp[1] = -1
nsim = 1000
accept_rate = 0
for (i in 1:nsim){
rho.prop = rnorm(1,rho_samp[i],1)
f_ratio = post_vals(rho.prop)/post_vals(rho_samp[i])
accept_prob = min(1, f_ratio)
u = runif(1)
if (accept_prob >= u){
rho_samp[i+1]=rho.prop
accept_rate = accept_rate + 1
}
else{
rho_samp[i+1]=rho_samp[i]
}
}
plot(sort(rho_samp), post_vals(sort(rho_samp)), type='l', main="Posterior by MH", xlab="rho", ylab="Density")
hist(rho_samp, xlim=c(-1,1), freq=F)
mh.mcmc = metrop(post_vals_unnorm, -1, 1000)
plot(density(mh.mcmc$batch[,1]))
traceplot(as.mcmc(mh.mcmc$batch[,1]))
hist(mh.mcmc$batch[,1], xlim=c(-1,1), main="Samples by MH", xlab="rho", freq=F)
rho = seq(-1,1,.01)
post_vals = function(rho){
const = (1/sqrt(2*pi))^n * (1/2)
sum = 0
sum = x[1]^2
for (i in 2:n){
next_comp = (x[i]-rho*x[i-1])^2
sum = sum + next_comp
}
val = const * exp(-(1/2)*sum)
return (val)
}
post_grid = post_vals(rho)
plot(rho, post_grid, type='l', main="Posterior Density", ylab="Density")
# Posterior by rejection sampling
nsim = 10000
M = .000001
accepted_rho = c()
num_accepted = 0
for (i in 1:nsim){
x.prop = runif(1, -1, 1)
accept.prob = post_vals(x.prop)/M
u = runif(1)
if( accept.prob >= u){
accepted_rho = c(accepted_rho, x.prop)
num_accepted = num_accepted + 1
}
}
(num_accepted/nsim)*100
rho_vals = sort(accepted_rho)
post_vals_RS = post_vals(rho_vals)
plot(rho_vals, post_vals_RS, xlim=c(-1,1), type='l', main="Posterior by Rejection Sampling")
lines(rho, post_grid, col="blue")
hist(accepted_rho, xlim=c(-1,1), xlab="rho", main="Samples from Rejection", freq=F)
lines(rho_vals, post_vals_RS, col="blue")
mean(post_grid)
mean(post_vals_RS)
x
length(x)
length(x)
x[length(x)]
x
pi_2 = rnorm(1, rho_star*x[length(x)], 1)
mean(post_grid)
mean(post_vals_RS)
mh.mcmc = metrop(post_vals_unnorm, -1, 1000)
?metrop
mean(mh.mcmc$batch[,1])
hist(mh.mcmc$batch[,1], xlim=c(-1,1), main="Samples by MH", xlab="rho", freq=F)
rho_star
post_vals = function(rho){
const = (1/sqrt(2*pi))^n * (1/2)
sum = 0
sum = x[1]^2
for (i in 2:n){
next_comp = (x[i]-rho*x[i-1])^2
sum = sum + next_comp
}
val = const * exp(-(1/2)*sum) * (rho >= -1 & rho <= 1)
return (val)
}
post_vals_unnorm = function(rho){
sum = 0
sum = x[1]^2
for (i in 2:n){
next_comp = (x[i]-rho*x[i-1])^2
sum = sum + next_comp
}
val = exp(-(1/2)*sum) * (rho >= -1 & rho <= 1)
return (log(val))
}
rho_samp = c()
rho_samp[1] = -1
nsim = 1000
accept_rate = 0
for (i in 1:nsim){
rho.prop = rnorm(1,rho_samp[i],1)
f_ratio = post_vals(rho.prop)/post_vals(rho_samp[i])
accept_prob = min(1, f_ratio)
u = runif(1)
if (accept_prob >= u){
rho_samp[i+1]=rho.prop
accept_rate = accept_rate + 1
}
else{
rho_samp[i+1]=rho_samp[i]
}
}
mean(rho_samp)
mean(mh.mcmc$batch[,1])
pi_2 = rnorm(1, rho_star*x[length(x)], 1)
pi_3 = rnorm(1, mean(mh.mcmc$batch[,1])*x[length(x)],1)
hist(pi_2)
pi_2 = rnorm(100, rho_star*x[length(x)], 1)
pi_3 = rnorm(100, mean(mh.mcmc$batch[,1])*x[length(x)],1)
hist(pi_2)
hist(pi_3)
likelihood <- function(rho){
const = (1/sqrt(2*pi))^n
sum = 0
sum = x[1]^2
for (i in 2:n){
next_comp = (x[i]-rho*x[i-1])^2
sum = sum + next_comp
}
val = const * exp(-(1/2)*sum)
return (val)
}
log_likelihood <- function(rho){
const = (1/sqrt(2*pi))^n
sum = 0
sum = x[1]^2
for (i in 2:n){
next_comp = (x[i]-rho*x[i-1])^2
sum = sum + next_comp
}
val = const * exp(-(1/2)*sum)
return (log(val))
}
?optimize
rho.MLE = optimize(log_likelihood, lower=-1, upper=1, maximum=T)
rho.MLE
plot(seq(-1,1,.01), log_likelihood(seq(-1,1,.01)))
plot(seq(-1,1,.01), exp(log_likelihood(seq(-1,1,.01))))
x
n
log_likelihood <- function(rho){
const = (1/sqrt(2*pi))^n
sum = 0
sum = x[1]^2
for (i in 2:n){
next_comp = (x[i]-rho*x[i-1])^2
sum = sum + next_comp
}
val = log(const) -((1/2)*sum)
return (val)
}
plot(seq(-1,1,.01),log_likelihood(seq(-1,1,.01)))
rho_star = 0.5
n = 10
x = c()
x[1] = rnorm(1)
for (i in 2:n){
mu = rho_star * x[i-1]
x[i] = mu + rnorm(1)
}
plot(seq(-1,1,.01),log_likelihood(seq(-1,1,.01)))
rho_star = 0.95
n = 10
x = c()
x[1] = rnorm(1)
for (i in 2:n){
mu = rho_star * x[i-1]
x[i] = mu + rnorm(1)
}
rho.MLE = optimize(log_likelihood, lower=-1, upper=1, maximum=T)$maximum
rho.MLE
pi_1 = rnorm(100, rho.MLE*x[length(x)],1)
pi_2 = rnorm(100, rho_star*x[length(x)], 1)
pi_3 = rnorm(100, mean(mh.mcmc$batch[,1])*x[length(x)],1)
hist(pi_1)
hist(pi_2)
hist(pi_3)
qnorm(.8)
qnorm(.2)
mu0 = 3.35
sigma = 0.15
n = 25
alpha = 0.10
alpha = 0.05
z_alpha = abs(qnorm(1-(alpha/2)))
rr_low = mu0 - z_alpha*(sigma/sqrt(n)) #rejection region low
rr_high = mu0 + z_alpha*(sigma/sqrt(n))
rr_low
rr_high
mu_true = 3.3
power = pnorm(rr_low, mu_true, (sigma/sqrt(n))) + (1-pnorm(rr_high, mu_true, (sigma/sqrt(n))))
power
pnorm(rr_low, mu_true, (sigma/sqrt(n)))
(1-pnorm(rr_high, mu_true, (sigma/sqrt(n))))
alpha = 0.05
K = 20
1 - (1-alpha)^K
K = 100
1 - (1-alpha)^K
correction = choose(20, 1)
alpha_star = alpha / correction
alpha_star
pvals = c()
nsim = 1000
for (i in 1:nsim){
x = rnorm(100)
pvals[i] = t.test(x=x, mu=0)$p.value
}
mean(pvals < 0.05) # Proportion that were flagged as significant
n = K
pvals = matrix(NA, nrow=nsim, ncol = n)
for (i in 1:nsim){
X = replicate(n=n, expr=rnorm(100))
pvals[i,] = apply(X=X, MARGIN=2, FUN = function(x){t.test(x=x,mu=0)$p.value})
}
any_significant = c()
for (i in 1:nsim){
any_significant[i] = any(pvals[i,] < 0.05)
}
mean(any_significant) #should look like Part (i)
K = 20
n = K
pvals = matrix(NA, nrow=nsim, ncol = n)
for (i in 1:nsim){
X = replicate(n=n, expr=rnorm(100))
pvals[i,] = apply(X=X, MARGIN=2, FUN = function(x){t.test(x=x,mu=0)$p.value})
}
any_significant = c()
for (i in 1:nsim){
any_significant[i] = any(pvals[i,] < 0.05)
}
mean(any_significant) #should look like Part (i)
any_significant_corrected = c()
for (i in 1:nsim){
any_significant_corrected[i] = any(pvals[i,] < alpha_star)
}
mean(any_significant_corrected) # should look like alpha
(1/sqrt(2*pi))
likelihood_unnorm <- function(x){
val = dnorm(x) / (1/sqrt(2*pi))
}
plot(seq(-3,3,.01), likelihood_unnorm(seq(-3,3,.01)))
likelihood_norm<- function(x){
return(dnorm(x))
}
plot(seq(-3,3,.01), likelihood_norm(seq(-3,3,.01)))
integrate(likelihood_unnorm,-3,3)
integrate(likelihood_unnorm,-Inf, Inf)
integrate(likelihood_norm,-Inf, Inf)
(1/sqrt(2*pi))
sqrt(2*pi)
likelihood_unnorm <- function(x){
val = dnorm(x) / (1/sqrt(2*pi))
}
?density
density(likelihood_unnorm(seq(-3,3,.01)))
ke=density(likelihood_unnorm(seq(-3,3,.01)))
ke
ke$y
integrate?
?integrate
?integrate
integrate(ke, -3,3)
integrate(density(likelihood_unnorm), lower=-3,upper=3)
integrate(density(likelihood_unnorm))
likelihood_unnorm <- function(x){
val = dnorm(x) / (1/sqrt(2*pi))
return(density(val))
}
likelihood_unnorm(0])
likelihood_unnorm(0)
dens <- function(x){
return(density(likelihood_unnorm(x)))
}
integrate(dens,lower=-3,upper=3)
plot(density(likelihood_unnorm(seq(-3,3,.01))))
ke=density(likelihood_unnorm(seq(-3,3,.01)))
likelihood_norm<- function(x){
return(dnorm(x))
}
likelihood_unnorm <- function(x){
val = dnorm(x) / (1/sqrt(2*pi))
return(val)
}
dens <- function(x){
return(density(likelihood_unnorm(x)))
}
ke=density(likelihood_unnorm(seq(-3,3,.01)))
plot(ke)
plot(ke)
ke=density(likelihood_unnorm(seq(-3,3,.01)))
plot(seq(-3,3,.01), likelihood_unnorm(-3,3,.01))
plot(seq(-3,3,.01), likelihood_unnorm(seq(-3,3,.01)))
plot(density(likelihood_unnorm(seq(-3,3,.01))))
?density
density(likelihood_unnorm(0))
density(likelihood_unnorm(c(0,1)))
sum(ke)
dim(ke)
ke
ke = ke$y
sum(ke)
dim(ke)
length(ke)
sum(ke)/length(ke)
plot(density(rnorm(100,0,1)/sqrt(2*pi)))
kern.ests = density(rnorm(1000,0,1,))$y
kern.ests = density(rnorm(1000,0,1))$y
plot(kern.ests)
plot(kern.ests, type='l')
integral.est = sum(kern.ests)/length(kern.ests)
integral.est
plot(c(0,1),kern.ests, type='l')
plot(seq(0,1,.01),kern.ests, type='l')
plot(seq(0,1,.001),kern.ests, type='l')
length(kern.ests)
1/512
plot(seq(0,1,.0019),kern.ests, type='l')
plot(seq(0,1,(1/length(kern.ests))),kern.ests, type='l')
plot(kern.ests, type='l', xlim=c(0,1))
plot(kern.ests, type='l')
integral.est = sum(kern.ests)/length(kern.ests)
sqrt(2*pi)
1/.11
kern.ests = density(rnorm(1000000,0,1))$y
plot(kern.ests, type='l')
integral.est = sum(kern.ests)/length(kern.ests)
length(kern.ests)
kern.ests = density(rnorm(1000000,0,1))$y
plot(kern.ests, type='l')
integral.est = sum(kern.ests)/length(kern.ests)
integral.est
sum(rnorm(1000000,0,1))/1000000
sum(rnorm(1000000))
sum(rnorm(1000000))
sum(rnorm(1000000,0,1))/1000000
sum(rnorm(1000000,0,1))/1000000
sum(rnorm(1000000))
sum(rnorm(1000000))
sum(rnorm(1000000))
sum(rnorm(1000000))
sum(rnorm(1000000))
sum(rnorm(1000000))
sum(rnorm(1000000))/1000000
sum(rnorm(1000000))/1000000/integral.est
1/sqrt(2*pi)
kern.ests = density(rnorm(1000000,0,1))$y
plot(kern.ests, type='l')
integral.est = sum(kern.ests)/length(kern.ests)
sum(rnorm(1000000))
sum(rnorm(length(kern.ests)))/length(kern.ests)
sum(rnorm(length(kern.ests)))/length(kern.ests) / integral.ests
sum(rnorm(length(kern.ests)))/length(kern.ests) / integral.est
1/sqrt(2*pi)
likelihood <- function(x){
val = exp(-(1/2)*x^2)
return(val)
}
likelihood <- function(x){
val = exp(-(1/2)*x^2)
return(val)
}
posterior <- function(x){
return (dnorm(x))
}
lik.vals = likelihood(seq(-2,2,.01))
post.vals = posterior(seq(-2,2,.01))
c1=sum(lik.vals)/length(lik.vals)
c2=sum(post.vals)/length(post.vals)
c1/c2
sqrt(2*pi0)
sqrt(2*pi)
?t.test
(18*(1.96+0.84)/5)^2
(18*(1.96-0.84)/5)^2
-exp(5)
exp(-5)
exp(.4)
qnorm(0.8)
18*(qnorm(0.95)+qnorm(0.8))
18*(qnorm(0.95)+qnorm(0.8))/5
(18*(qnorm(0.95)+qnorm(0.8))/5)^2
qnorm(0.95)
n = c(31,31,14)
N = sum(n)
mean = c(25.8,22.68,21.29)
sd = c(2.56, 3.67, 2.76)
allmean = mean(mean)
SSB = sum(n*(mean-allmean)^2)
SSW = sum((n-1)*sd^2)
dfB = length(n)-1
dfW = N - length(n)
F_obs = (SSB/dfB)/(SSW/dfW)
1 - pf(F_obs, dfB, dfW) #p-value
a = c(1,-.5,-.5)
T_num = sum(a*mean)
Sp2 = SSW/ (sum(n)-length(n))
T_denom = sqrt(Sp2) * sqrt(sum(a^2/n))
T = T_num / T_denom
df = sum(n)-length(n)
p.val = 2*(1-pt(T,df))
p.val
a = c(0,1,-1)
a = c(0,1,-1)
T_num = sum(a*mean)
T_denom = sqrt(Sp2) * sqrt(sum(a^2/n))
T = T_num / T_denom
df = sum(n)-length(n)
p.val = 2*(1-pt(T,df))
p.val
var.pooled = ((n[2]-1)*sd[2]^2 + (n[3]-1)*sd[3]^2)/(n[2]+n[3]-2)
sd.pooled = sqrt(var.pooled)
t.obs = (mean[2]-mean[3])/(sd.pooled*sqrt((1/n[2])+(1/n[3])))
df.t = (n[2]+n[3]-2)
2*(1-pt(t.obs,df.t))
setwd("~/Desktop/Stat139/Section 6")
data = read.csv("insurance_claims.csv")
head(data)
attach(data)
hist(claim_amount)
hist(log(claim_amount))
boxplot(log(claim_amount)~fraudulent)
boxplot(log(claim_amount)~claim_type)
model0= aov(log(claim_amount)~fraudulent)
summary(model0)
t.test(log(claim_amount)~fraudulent, var.equal=T)
t.test(log(claim_amount)~fraudulent, var.equal=T)$statistic^2
model1 = aov(log(claim_amount)~claim_type)
summary(model1)
model2 = aov(log(claim_amount)~claim_type+fraudulent)
summary(model2)
model3 = aov(log(claim_amount)~townsize)
summary(model3)
model4 = aov(log(claim_amount)~claim_type+townsize)
summary(model4)
model3 = aov(log(claim_amount)~townsize)
summary(model3)
model5 = aov(log(claim_amount)~claim_type*townsize)
summary(model5)
